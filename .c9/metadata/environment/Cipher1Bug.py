{"changed":true,"filter":false,"title":"Cipher1Bug.py","tooltip":"/Cipher1Bug.py","value":"# Module Lab: Caesar Cipher Program Bug #4\n#\n# In a previous lab, you created a Caesar cipher program. This version of\n# the program is buggy. Use a debugger to find the bug and fix it.\n\n# Double the given alphabet\ndef getDoubleAlphabet(alphabet):\n    doubleAlphabet = alphabet + alphabet\n    return doubleAlphabet\n\n# Get a message to encrypt\ndef getMessage():\n    stringToEncrypt = input(\"Please enter a message to encrypt: \")\n    return stringToEncrypt\n\n# Get a cipher key\ndef getCipherKey():\n    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")\n    return shiftAmount\n\n# Encrypt message\ndef encryptMessage(message, cipherKey, alphabet):\n    encryptedMessage = \"\"\n    uppercaseMessage = \"\"\n    uppercaseMessage = message.upper()\n    for currentCharacter in uppercaseMessage:\n        position = alphabet.find(currentCharacter)\n        newPosition = position + int(cipherKey)\n        if currentCharacter in alphabet:\n            encryptedMessage = encryptedMessage + alphabet[newPosition]\n        else:\n            encryptedMessage = encryptedMessage + currentCharacter\n    return encryptedMessage\n\n# Decrypt message\ndef decryptMessage(message, cipherKey, alphabet):\n    decryptKey = -1 * int(cipherKey)\n    return encryptMessage(message, decryptKey, alphabet)\n\n# Main program logic\ndef runCaesarCipherProgram():\n    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    print(f'Alphabet: {myAlphabet}')\n    myAlphabet2 = getDoubleAlphabet(myAlphabet)\n    print(f'Alphabet2: {myAlphabet2}')\n    myMessage = getMessage()\n    print(myMessage)\n    myCipherKey = getCipherKey()\n    print(myCipherKey)\n    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)\n    print(f'Encrypted Message: {myEncryptedMessage}')\n    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)\n    print(f'Decrypted Message: {myEncryptedMessage}')\n\n# Main logic\nrunCaesarCipherProgram()","undoManager":{"mark":-2,"position":38,"stack":[[{"start":{"row":0,"column":0},"end":{"row":55,"column":24},"action":"insert","lines":["# Module Lab: Caesar Cipher Program Bug #1","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + cipherKey","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"],"id":1}],[{"start":{"row":27,"column":33},"end":{"row":27,"column":34},"action":"insert","lines":["i"],"id":2},{"start":{"row":27,"column":34},"end":{"row":27,"column":35},"action":"insert","lines":["n"]},{"start":{"row":27,"column":35},"end":{"row":27,"column":36},"action":"insert","lines":["t"]},{"start":{"row":27,"column":36},"end":{"row":27,"column":37},"action":"insert","lines":["("]}],[{"start":{"row":27,"column":46},"end":{"row":27,"column":47},"action":"insert","lines":[")"],"id":3}],[{"start":{"row":6,"column":22},"end":{"row":6,"column":30},"action":"remove","lines":["alphabet"],"id":4},{"start":{"row":6,"column":22},"end":{"row":6,"column":23},"action":"insert","lines":["u"]},{"start":{"row":6,"column":23},"end":{"row":6,"column":24},"action":"insert","lines":["s"]},{"start":{"row":6,"column":24},"end":{"row":6,"column":25},"action":"insert","lines":["e"]},{"start":{"row":6,"column":25},"end":{"row":6,"column":26},"action":"insert","lines":["r"]},{"start":{"row":6,"column":26},"end":{"row":6,"column":27},"action":"insert","lines":["d"]},{"start":{"row":6,"column":27},"end":{"row":6,"column":28},"action":"insert","lines":["e"]}],[{"start":{"row":6,"column":27},"end":{"row":6,"column":28},"action":"remove","lines":["e"],"id":5},{"start":{"row":6,"column":26},"end":{"row":6,"column":27},"action":"remove","lines":["d"]}],[{"start":{"row":6,"column":26},"end":{"row":6,"column":27},"action":"insert","lines":["v"],"id":6},{"start":{"row":6,"column":27},"end":{"row":6,"column":28},"action":"insert","lines":["a"]},{"start":{"row":6,"column":28},"end":{"row":6,"column":29},"action":"insert","lines":["r"]},{"start":{"row":6,"column":29},"end":{"row":6,"column":30},"action":"insert","lines":["i"]},{"start":{"row":6,"column":30},"end":{"row":6,"column":31},"action":"insert","lines":["a"]},{"start":{"row":6,"column":31},"end":{"row":6,"column":32},"action":"insert","lines":["b"]},{"start":{"row":6,"column":32},"end":{"row":6,"column":33},"action":"insert","lines":["l"]},{"start":{"row":6,"column":33},"end":{"row":6,"column":34},"action":"insert","lines":["e"]}],[{"start":{"row":7,"column":21},"end":{"row":7,"column":29},"action":"remove","lines":["alphabet"],"id":7},{"start":{"row":7,"column":21},"end":{"row":7,"column":33},"action":"insert","lines":["uservariable"]}],[{"start":{"row":7,"column":36},"end":{"row":7,"column":44},"action":"remove","lines":["alphabet"],"id":8},{"start":{"row":7,"column":36},"end":{"row":7,"column":48},"action":"insert","lines":["uservariable"]}],[{"start":{"row":43,"column":36},"end":{"row":43,"column":46},"action":"remove","lines":["myAlphabet"],"id":9},{"start":{"row":43,"column":36},"end":{"row":43,"column":37},"action":"insert","lines":["a"]},{"start":{"row":43,"column":37},"end":{"row":43,"column":38},"action":"insert","lines":["r"]},{"start":{"row":43,"column":38},"end":{"row":43,"column":39},"action":"insert","lines":["g"]},{"start":{"row":43,"column":39},"end":{"row":43,"column":40},"action":"insert","lines":["u"]},{"start":{"row":43,"column":40},"end":{"row":43,"column":41},"action":"insert","lines":["e"]},{"start":{"row":43,"column":41},"end":{"row":43,"column":42},"action":"insert","lines":["m"]}],[{"start":{"row":43,"column":41},"end":{"row":43,"column":42},"action":"remove","lines":["m"],"id":10},{"start":{"row":43,"column":40},"end":{"row":43,"column":41},"action":"remove","lines":["e"]}],[{"start":{"row":43,"column":40},"end":{"row":43,"column":41},"action":"insert","lines":["m"],"id":11},{"start":{"row":43,"column":41},"end":{"row":43,"column":42},"action":"insert","lines":["e"]},{"start":{"row":43,"column":42},"end":{"row":43,"column":43},"action":"insert","lines":["n"]},{"start":{"row":43,"column":43},"end":{"row":43,"column":44},"action":"insert","lines":["t"]}],[{"start":{"row":41,"column":4},"end":{"row":41,"column":14},"action":"remove","lines":["myAlphabet"],"id":12},{"start":{"row":41,"column":4},"end":{"row":41,"column":5},"action":"insert","lines":["a"]},{"start":{"row":41,"column":5},"end":{"row":41,"column":6},"action":"insert","lines":["r"]},{"start":{"row":41,"column":6},"end":{"row":41,"column":7},"action":"insert","lines":["g"]},{"start":{"row":41,"column":7},"end":{"row":41,"column":8},"action":"insert","lines":["u"]},{"start":{"row":41,"column":8},"end":{"row":41,"column":9},"action":"insert","lines":["m"]},{"start":{"row":41,"column":9},"end":{"row":41,"column":10},"action":"insert","lines":["e"]},{"start":{"row":41,"column":10},"end":{"row":41,"column":11},"action":"insert","lines":["n"]},{"start":{"row":41,"column":11},"end":{"row":41,"column":12},"action":"insert","lines":["t"]}],[{"start":{"row":42,"column":23},"end":{"row":42,"column":33},"action":"remove","lines":["myAlphabet"],"id":13},{"start":{"row":42,"column":23},"end":{"row":42,"column":24},"action":"insert","lines":["a"]},{"start":{"row":42,"column":24},"end":{"row":42,"column":25},"action":"insert","lines":["r"]},{"start":{"row":42,"column":25},"end":{"row":42,"column":26},"action":"insert","lines":["g"]},{"start":{"row":42,"column":26},"end":{"row":42,"column":27},"action":"insert","lines":["u"]},{"start":{"row":42,"column":27},"end":{"row":42,"column":28},"action":"insert","lines":["m"]},{"start":{"row":42,"column":28},"end":{"row":42,"column":29},"action":"insert","lines":["e"]},{"start":{"row":42,"column":29},"end":{"row":42,"column":30},"action":"insert","lines":["n"]},{"start":{"row":42,"column":30},"end":{"row":42,"column":31},"action":"insert","lines":["t"]}],[{"start":{"row":41,"column":15},"end":{"row":41,"column":16},"action":"insert","lines":["a"],"id":14},{"start":{"row":41,"column":16},"end":{"row":41,"column":17},"action":"insert","lines":["d"]}],[{"start":{"row":41,"column":17},"end":{"row":41,"column":18},"action":"insert","lines":["h"],"id":15},{"start":{"row":41,"column":18},"end":{"row":41,"column":19},"action":"insert","lines":["e"]},{"start":{"row":41,"column":19},"end":{"row":41,"column":20},"action":"insert","lines":["p"]},{"start":{"row":41,"column":20},"end":{"row":41,"column":21},"action":"insert","lines":["g"]},{"start":{"row":41,"column":21},"end":{"row":41,"column":22},"action":"insert","lines":["y"]},{"start":{"row":41,"column":22},"end":{"row":41,"column":23},"action":"insert","lines":["a"]},{"start":{"row":41,"column":23},"end":{"row":41,"column":24},"action":"insert","lines":[";"]}],[{"start":{"row":41,"column":24},"end":{"row":41,"column":25},"action":"insert","lines":["f"],"id":16},{"start":{"row":41,"column":25},"end":{"row":41,"column":26},"action":"insert","lines":["d"]},{"start":{"row":41,"column":26},"end":{"row":41,"column":27},"action":"insert","lines":["i"]}],[{"start":{"row":41,"column":26},"end":{"row":41,"column":27},"action":"remove","lines":["i"],"id":17},{"start":{"row":41,"column":25},"end":{"row":41,"column":26},"action":"remove","lines":["d"]},{"start":{"row":41,"column":24},"end":{"row":41,"column":25},"action":"remove","lines":["f"]},{"start":{"row":41,"column":23},"end":{"row":41,"column":24},"action":"remove","lines":[";"]}],[{"start":{"row":41,"column":23},"end":{"row":41,"column":24},"action":"insert","lines":["l"],"id":18},{"start":{"row":41,"column":24},"end":{"row":41,"column":25},"action":"insert","lines":["f"]},{"start":{"row":41,"column":25},"end":{"row":41,"column":26},"action":"insert","lines":["h"]},{"start":{"row":41,"column":26},"end":{"row":41,"column":27},"action":"insert","lines":["o"]},{"start":{"row":41,"column":27},"end":{"row":41,"column":28},"action":"insert","lines":["i"]},{"start":{"row":41,"column":28},"end":{"row":41,"column":29},"action":"insert","lines":["h"]},{"start":{"row":41,"column":29},"end":{"row":41,"column":30},"action":"insert","lines":["g"]},{"start":{"row":41,"column":30},"end":{"row":41,"column":31},"action":"insert","lines":["h"]},{"start":{"row":41,"column":31},"end":{"row":41,"column":32},"action":"insert","lines":["s"]},{"start":{"row":41,"column":32},"end":{"row":41,"column":33},"action":"insert","lines":["l"]},{"start":{"row":41,"column":33},"end":{"row":41,"column":34},"action":"insert","lines":["i"]},{"start":{"row":41,"column":34},"end":{"row":41,"column":35},"action":"insert","lines":["s"]},{"start":{"row":41,"column":35},"end":{"row":41,"column":36},"action":"insert","lines":["d"]},{"start":{"row":41,"column":36},"end":{"row":41,"column":37},"action":"insert","lines":["f"]},{"start":{"row":41,"column":37},"end":{"row":41,"column":38},"action":"insert","lines":["j"]},{"start":{"row":41,"column":38},"end":{"row":41,"column":39},"action":"insert","lines":["h"]}],[{"start":{"row":41,"column":39},"end":{"row":41,"column":40},"action":"insert","lines":["g"],"id":19},{"start":{"row":41,"column":40},"end":{"row":41,"column":41},"action":"insert","lines":["s"]},{"start":{"row":41,"column":41},"end":{"row":41,"column":42},"action":"insert","lines":["l"]},{"start":{"row":41,"column":42},"end":{"row":41,"column":43},"action":"insert","lines":["h"]}],[{"start":{"row":6,"column":22},"end":{"row":6,"column":34},"action":"remove","lines":["uservariable"],"id":20},{"start":{"row":6,"column":22},"end":{"row":6,"column":23},"action":"insert","lines":["a"]},{"start":{"row":6,"column":23},"end":{"row":6,"column":24},"action":"insert","lines":["l"]},{"start":{"row":6,"column":24},"end":{"row":6,"column":25},"action":"insert","lines":["p"]},{"start":{"row":6,"column":25},"end":{"row":6,"column":26},"action":"insert","lines":["h"]},{"start":{"row":6,"column":26},"end":{"row":6,"column":27},"action":"insert","lines":["a"]},{"start":{"row":6,"column":27},"end":{"row":6,"column":28},"action":"insert","lines":["b"]},{"start":{"row":6,"column":28},"end":{"row":6,"column":29},"action":"insert","lines":["e"]},{"start":{"row":6,"column":29},"end":{"row":6,"column":30},"action":"insert","lines":["t"]}],[{"start":{"row":7,"column":21},"end":{"row":7,"column":33},"action":"remove","lines":["uservariable"],"id":21},{"start":{"row":7,"column":21},"end":{"row":7,"column":29},"action":"insert","lines":["alphabet"]}],[{"start":{"row":7,"column":32},"end":{"row":7,"column":44},"action":"remove","lines":["uservariable"],"id":22},{"start":{"row":7,"column":32},"end":{"row":7,"column":40},"action":"insert","lines":["alphabet"]}],[{"start":{"row":41,"column":15},"end":{"row":41,"column":43},"action":"remove","lines":["adhepgyalfhoihghslisdfjhgslh"],"id":23}],[{"start":{"row":41,"column":4},"end":{"row":41,"column":12},"action":"remove","lines":["argument"],"id":24},{"start":{"row":41,"column":4},"end":{"row":41,"column":5},"action":"insert","lines":["m"]},{"start":{"row":41,"column":5},"end":{"row":41,"column":6},"action":"insert","lines":["y"]},{"start":{"row":41,"column":6},"end":{"row":41,"column":7},"action":"insert","lines":["A"]},{"start":{"row":41,"column":7},"end":{"row":41,"column":8},"action":"insert","lines":["p"]},{"start":{"row":41,"column":8},"end":{"row":41,"column":9},"action":"insert","lines":["l"]}],[{"start":{"row":41,"column":8},"end":{"row":41,"column":9},"action":"remove","lines":["l"],"id":25},{"start":{"row":41,"column":7},"end":{"row":41,"column":8},"action":"remove","lines":["p"]}],[{"start":{"row":41,"column":7},"end":{"row":41,"column":8},"action":"insert","lines":["l"],"id":26},{"start":{"row":41,"column":8},"end":{"row":41,"column":9},"action":"insert","lines":["p"]},{"start":{"row":41,"column":9},"end":{"row":41,"column":10},"action":"insert","lines":["h"]},{"start":{"row":41,"column":10},"end":{"row":41,"column":11},"action":"insert","lines":["a"]},{"start":{"row":41,"column":11},"end":{"row":41,"column":12},"action":"insert","lines":["b"]},{"start":{"row":41,"column":12},"end":{"row":41,"column":13},"action":"insert","lines":["e"]},{"start":{"row":41,"column":13},"end":{"row":41,"column":14},"action":"insert","lines":["t"]}],[{"start":{"row":42,"column":23},"end":{"row":42,"column":31},"action":"remove","lines":["argument"],"id":27},{"start":{"row":42,"column":23},"end":{"row":42,"column":33},"action":"insert","lines":["myAlphabet"]}],[{"start":{"row":43,"column":36},"end":{"row":43,"column":44},"action":"remove","lines":["argument"],"id":28},{"start":{"row":43,"column":36},"end":{"row":43,"column":46},"action":"insert","lines":["myAlphabet"]}],[{"start":{"row":0,"column":0},"end":{"row":55,"column":24},"action":"remove","lines":["# Module Lab: Caesar Cipher Program Bug #1","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"],"id":29},{"start":{"row":0,"column":0},"end":{"row":55,"column":24},"action":"insert","lines":["# Module Lab: Caesar Cipher Program Bug #2","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"]}],[{"start":{"row":24,"column":30},"end":{"row":24,"column":31},"action":"insert","lines":["."],"id":30},{"start":{"row":24,"column":31},"end":{"row":24,"column":32},"action":"insert","lines":["u"]},{"start":{"row":24,"column":32},"end":{"row":24,"column":33},"action":"insert","lines":["p"]},{"start":{"row":24,"column":33},"end":{"row":24,"column":34},"action":"insert","lines":["p"]},{"start":{"row":24,"column":34},"end":{"row":24,"column":35},"action":"insert","lines":["e"]},{"start":{"row":24,"column":35},"end":{"row":24,"column":36},"action":"insert","lines":["r"]}],[{"start":{"row":24,"column":36},"end":{"row":24,"column":38},"action":"insert","lines":["()"],"id":31}],[{"start":{"row":0,"column":0},"end":{"row":55,"column":24},"action":"remove","lines":["# Module Lab: Caesar Cipher Program Bug #2","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"],"id":32},{"start":{"row":0,"column":0},"end":{"row":55,"column":24},"action":"insert","lines":["# Module Lab: Caesar Cipher Program Bug #3","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, cipherKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"]}],[{"start":{"row":37,"column":36},"end":{"row":37,"column":41},"action":"remove","lines":["ipher"],"id":33},{"start":{"row":37,"column":35},"end":{"row":37,"column":36},"action":"remove","lines":["c"]}],[{"start":{"row":37,"column":35},"end":{"row":37,"column":36},"action":"insert","lines":["d"],"id":34},{"start":{"row":37,"column":36},"end":{"row":37,"column":37},"action":"insert","lines":["e"]},{"start":{"row":37,"column":37},"end":{"row":37,"column":38},"action":"insert","lines":["c"]},{"start":{"row":37,"column":38},"end":{"row":37,"column":39},"action":"insert","lines":["r"]},{"start":{"row":37,"column":39},"end":{"row":37,"column":40},"action":"insert","lines":["y"]},{"start":{"row":37,"column":40},"end":{"row":37,"column":41},"action":"insert","lines":["p"]},{"start":{"row":37,"column":41},"end":{"row":37,"column":42},"action":"insert","lines":["t"]}],[{"start":{"row":37,"column":35},"end":{"row":37,"column":42},"action":"remove","lines":["decrypt"],"id":35},{"start":{"row":37,"column":35},"end":{"row":37,"column":36},"action":"insert","lines":["c"]},{"start":{"row":37,"column":36},"end":{"row":37,"column":37},"action":"insert","lines":["i"]},{"start":{"row":37,"column":37},"end":{"row":37,"column":38},"action":"insert","lines":["p"]},{"start":{"row":37,"column":38},"end":{"row":37,"column":39},"action":"insert","lines":["h"]},{"start":{"row":37,"column":39},"end":{"row":37,"column":40},"action":"insert","lines":["e"]},{"start":{"row":37,"column":40},"end":{"row":37,"column":41},"action":"insert","lines":["r"]}],[{"start":{"row":0,"column":0},"end":{"row":55,"column":24},"action":"remove","lines":["# Module Lab: Caesar Cipher Program Bug #3","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, cipherKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"],"id":36},{"start":{"row":0,"column":0},"end":{"row":55,"column":24},"action":"insert","lines":["# Module Lab: Caesar Cipher Program Bug #4","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myEncryptedMessage}')","","# Main logic","runCaesarCipherProgram()"]}],[{"start":{"row":52,"column":35},"end":{"row":52,"column":36},"action":"remove","lines":["n"],"id":37},{"start":{"row":52,"column":34},"end":{"row":52,"column":35},"action":"remove","lines":["E"]}],[{"start":{"row":52,"column":34},"end":{"row":52,"column":35},"action":"insert","lines":["D"],"id":38},{"start":{"row":52,"column":35},"end":{"row":52,"column":36},"action":"insert","lines":["e"]}],[{"start":{"row":52,"column":34},"end":{"row":52,"column":36},"action":"remove","lines":["De"],"id":39},{"start":{"row":52,"column":34},"end":{"row":52,"column":35},"action":"insert","lines":["E"]},{"start":{"row":52,"column":35},"end":{"row":52,"column":36},"action":"insert","lines":["n"]}]]},"ace":{"folds":[],"scrolltop":416,"scrollleft":0,"selection":{"start":{"row":45,"column":28},"end":{"row":45,"column":28},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1679223517605}