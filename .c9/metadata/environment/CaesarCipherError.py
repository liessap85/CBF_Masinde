{"filter":false,"title":"CaesarCipherError.py","tooltip":"/CaesarCipherError.py","undoManager":{"mark":26,"position":26,"stack":[[{"start":{"row":0,"column":0},"end":{"row":55,"column":24},"action":"insert","lines":["# Module Lab: Caesar Cipher Program Bug #1","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + cipherKey","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"],"id":1}],[{"start":{"row":27,"column":33},"end":{"row":27,"column":34},"action":"insert","lines":["("],"id":2},{"start":{"row":27,"column":34},"end":{"row":27,"column":35},"action":"insert","lines":["s"]},{"start":{"row":27,"column":35},"end":{"row":27,"column":36},"action":"insert","lines":["t"]},{"start":{"row":27,"column":36},"end":{"row":27,"column":37},"action":"insert","lines":["r"]},{"start":{"row":27,"column":37},"end":{"row":27,"column":38},"action":"insert","lines":[")"]}],[{"start":{"row":27,"column":44},"end":{"row":27,"column":45},"action":"remove","lines":["K"],"id":3},{"start":{"row":27,"column":43},"end":{"row":27,"column":44},"action":"remove","lines":["r"]},{"start":{"row":27,"column":42},"end":{"row":27,"column":43},"action":"remove","lines":["e"]},{"start":{"row":27,"column":41},"end":{"row":27,"column":42},"action":"remove","lines":["h"]},{"start":{"row":27,"column":40},"end":{"row":27,"column":41},"action":"remove","lines":["p"]},{"start":{"row":27,"column":39},"end":{"row":27,"column":40},"action":"remove","lines":["i"]},{"start":{"row":27,"column":38},"end":{"row":27,"column":39},"action":"remove","lines":["c"]},{"start":{"row":27,"column":37},"end":{"row":27,"column":38},"action":"remove","lines":[")"]},{"start":{"row":27,"column":36},"end":{"row":27,"column":37},"action":"remove","lines":["r"]},{"start":{"row":27,"column":35},"end":{"row":27,"column":36},"action":"remove","lines":["t"]},{"start":{"row":27,"column":34},"end":{"row":27,"column":35},"action":"remove","lines":["s"]}],[{"start":{"row":27,"column":33},"end":{"row":27,"column":34},"action":"remove","lines":["("],"id":4}],[{"start":{"row":27,"column":33},"end":{"row":27,"column":34},"action":"insert","lines":["s"],"id":5},{"start":{"row":27,"column":34},"end":{"row":27,"column":35},"action":"insert","lines":["t"]},{"start":{"row":27,"column":35},"end":{"row":27,"column":36},"action":"insert","lines":["r"]}],[{"start":{"row":27,"column":35},"end":{"row":27,"column":36},"action":"remove","lines":["r"],"id":6},{"start":{"row":27,"column":34},"end":{"row":27,"column":35},"action":"remove","lines":["t"]},{"start":{"row":27,"column":33},"end":{"row":27,"column":34},"action":"remove","lines":["s"]}],[{"start":{"row":27,"column":33},"end":{"row":27,"column":34},"action":"insert","lines":["i"],"id":7},{"start":{"row":27,"column":34},"end":{"row":27,"column":35},"action":"insert","lines":["n"]},{"start":{"row":27,"column":35},"end":{"row":27,"column":36},"action":"insert","lines":["t"]},{"start":{"row":27,"column":36},"end":{"row":27,"column":37},"action":"insert","lines":["("]}],[{"start":{"row":27,"column":37},"end":{"row":27,"column":38},"action":"insert","lines":["c"],"id":8},{"start":{"row":27,"column":38},"end":{"row":27,"column":39},"action":"insert","lines":["i"]},{"start":{"row":27,"column":39},"end":{"row":27,"column":40},"action":"insert","lines":["p"]},{"start":{"row":27,"column":40},"end":{"row":27,"column":41},"action":"insert","lines":["h"]}],[{"start":{"row":27,"column":37},"end":{"row":27,"column":43},"action":"remove","lines":["ciphey"],"id":9},{"start":{"row":27,"column":37},"end":{"row":27,"column":46},"action":"insert","lines":["cipherKey"]}],[{"start":{"row":27,"column":46},"end":{"row":27,"column":47},"action":"insert","lines":[")"],"id":10}],[{"start":{"row":27,"column":35},"end":{"row":27,"column":36},"action":"remove","lines":["t"],"id":11},{"start":{"row":27,"column":34},"end":{"row":27,"column":35},"action":"remove","lines":["n"]},{"start":{"row":27,"column":33},"end":{"row":27,"column":34},"action":"remove","lines":["i"]}],[{"start":{"row":27,"column":33},"end":{"row":27,"column":34},"action":"insert","lines":["s"],"id":12},{"start":{"row":27,"column":34},"end":{"row":27,"column":35},"action":"insert","lines":["t"]},{"start":{"row":27,"column":35},"end":{"row":27,"column":36},"action":"insert","lines":["r"]}],[{"start":{"row":27,"column":36},"end":{"row":27,"column":37},"action":"remove","lines":["("],"id":13},{"start":{"row":27,"column":35},"end":{"row":27,"column":36},"action":"remove","lines":["r"]},{"start":{"row":27,"column":34},"end":{"row":27,"column":35},"action":"remove","lines":["t"]},{"start":{"row":27,"column":33},"end":{"row":27,"column":34},"action":"remove","lines":["s"]}],[{"start":{"row":27,"column":43},"end":{"row":28,"column":0},"action":"insert","lines":["",""],"id":14},{"start":{"row":28,"column":0},"end":{"row":28,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":28,"column":4},"end":{"row":28,"column":8},"action":"remove","lines":["    "],"id":15},{"start":{"row":28,"column":0},"end":{"row":28,"column":4},"action":"remove","lines":["    "]},{"start":{"row":27,"column":43},"end":{"row":28,"column":0},"action":"remove","lines":["",""]},{"start":{"row":27,"column":42},"end":{"row":27,"column":43},"action":"remove","lines":[")"]}],[{"start":{"row":27,"column":22},"end":{"row":27,"column":23},"action":"insert","lines":["("],"id":16},{"start":{"row":27,"column":23},"end":{"row":27,"column":24},"action":"insert","lines":["i"]},{"start":{"row":27,"column":24},"end":{"row":27,"column":25},"action":"insert","lines":["n"]},{"start":{"row":27,"column":25},"end":{"row":27,"column":26},"action":"insert","lines":["t"]}],[{"start":{"row":27,"column":25},"end":{"row":27,"column":26},"action":"remove","lines":["t"],"id":17},{"start":{"row":27,"column":24},"end":{"row":27,"column":25},"action":"remove","lines":["n"]},{"start":{"row":27,"column":23},"end":{"row":27,"column":24},"action":"remove","lines":["i"]},{"start":{"row":27,"column":22},"end":{"row":27,"column":23},"action":"remove","lines":["("]}],[{"start":{"row":27,"column":22},"end":{"row":27,"column":23},"action":"insert","lines":["i"],"id":18},{"start":{"row":27,"column":23},"end":{"row":27,"column":24},"action":"insert","lines":["n"]},{"start":{"row":27,"column":24},"end":{"row":27,"column":25},"action":"insert","lines":["t"]},{"start":{"row":27,"column":25},"end":{"row":27,"column":26},"action":"insert","lines":["("]}],[{"start":{"row":27,"column":34},"end":{"row":27,"column":35},"action":"insert","lines":[")"],"id":19}],[{"start":{"row":27,"column":22},"end":{"row":27,"column":26},"action":"remove","lines":["int("],"id":20}],[{"start":{"row":27,"column":30},"end":{"row":27,"column":31},"action":"remove","lines":[")"],"id":21}],[{"start":{"row":27,"column":33},"end":{"row":27,"column":34},"action":"insert","lines":["i"],"id":22},{"start":{"row":27,"column":34},"end":{"row":27,"column":35},"action":"insert","lines":["n"]},{"start":{"row":27,"column":35},"end":{"row":27,"column":36},"action":"insert","lines":["t"]},{"start":{"row":27,"column":36},"end":{"row":27,"column":37},"action":"insert","lines":["("]}],[{"start":{"row":27,"column":46},"end":{"row":27,"column":47},"action":"insert","lines":[")"],"id":23}],[{"start":{"row":0,"column":0},"end":{"row":55,"column":24},"action":"remove","lines":["# Module Lab: Caesar Cipher Program Bug #1","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"],"id":24},{"start":{"row":0,"column":0},"end":{"row":55,"column":24},"action":"insert","lines":["# Module Lab: Caesar Cipher Program Bug #2","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"]}],[{"start":{"row":55,"column":24},"end":{"row":56,"column":0},"action":"insert","lines":["",""],"id":25}],[{"start":{"row":0,"column":0},"end":{"row":55,"column":24},"action":"remove","lines":["# Module Lab: Caesar Cipher Program Bug #2","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"],"id":26},{"start":{"row":0,"column":0},"end":{"row":55,"column":24},"action":"insert","lines":["# Module Lab: Caesar Cipher Program Bug #3","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, cipherKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"]}],[{"start":{"row":55,"column":24},"end":{"row":56,"column":0},"action":"insert","lines":["",""],"id":27}]]},"ace":{"folds":[],"scrolltop":947.8000030517578,"scrollleft":0,"selection":{"start":{"row":56,"column":0},"end":{"row":56,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1678742524867,"hash":"bb2eca389b0ab4ddfe0169e7b618998fe29f14f0"}